

Type_ power(Type_ N, int M) {
	Type_ A = 1;
	// N %= MOD;
	while(N) {
        if(N%2) A = A*M; // % MOD
        M = M*M; // % MOD
        N /= 2;
    }	
	return A;
}

int bin_coeff(int n, int k) {
	if(n - k > k) k = n - k;
	int val = 1;
	for(int i = 0; i < k; ++i) {
		res *= (n - i);
		res /= (i + 1);
	}
	return val;
}

int catalan(int N) 
	return bin_coeff(2*n, n) / (n+1);

int setPartition(int n) { // bell number
   int b[n+1][n+1];
   b[0][0] = 1;
   for (int i=1; i<=n; i++) {
      b[i][0] = b[i-1][i-1];
      for (int j=1; j<=i; j++) b[i][j] = b[i-1][j-1] + b[i][j-1];
   }
   return b[n][0];
}

